//=============================================================================
/*!	@file	threadInterface.h

	@brief	スレッドクラス

	@author	ryunosuke ide
	@date	2013.03.06
*/
//=============================================================================



#ifndef __THREAD_INTERFACE_H__
#define __THREAD_INTERFACE_H__

#include <stdio.h>
#include <nk/thread/threadFunc.h>


namespace nk {


//=============================================================================
/*!
								スレッド
*/
//=============================================================================
class Thread {
public:
	//-----------------------型定義--------------------------
	
	//! ステータス
	enum STATUS {
		STATUS_NOT_INITIALIZED,
		STATUS_RUN,
		STATUS_PAUSE,
		STATUS_CANCEL,
		STATUS_EXIT,
	};
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		セットアップ
	*/
	//===========================================================================
	void			Setup( u32 priority = THREAD_PRIORITY_NORMAL, u32 stackSize = 0, const char* name = "" );

	//===========================================================================
	/*!	@brief		開始
	*/
	//===========================================================================
	void			Start( void );

	//===========================================================================
	/*!	@brief		終了
	*/
	//===========================================================================
	void			Cancel( void );

	//===========================================================================
	/*!	@brief		停止
	*/
	//===========================================================================
	void			Pause( void );

	//===========================================================================
	/*!	@brief		ステータス習得
		@return		STATUS型
	*/
	//===========================================================================
	u32				GetStatus( void ) const;

	//===========================================================================
	/*!	@brief		実行中ならtrueを返す
	*/
	//===========================================================================
	bool			Running( void ) const;

	//===========================================================================
	/*!	@brief		キャンセルならtrueを返す
	*/
	//===========================================================================
	bool			IsCancel( void ) const;

	//===========================================================================
	/*!	@brief		待機
	*/
	//===========================================================================
	void			Join( void );
	
protected:
	

	//===========================================================================
	/*!	@brief		スレッド処理
	*/
	//===========================================================================
	virtual void	ThreadFunc( void ) = 0;

protected:
	
private:
	// スレッドコールバック
	static u32		_ThreadCallback( void* param );
	void			ThreadCallback( void );
	
	//----------------------メンバ変数-----------------------
	THREAD_HANDLE	m_handle;		//!< スレッドハンドル
	bool			m_created;		//!< スレッド生成済みならtrue
	u32				m_status;		//!< ステータス
	
	
	//-----------------------メソッド------------------------
	void			_Init();
	void			_Term();

public:
	//-------------コンストラクタ・デストラクタ--------------
			Thread();
	virtual~Thread();
};





}	// namespace nk

#endif  // __THREAD_INTERFACE_H__