//=============================================================================
/*!	@file	thread.h
	@brief	スレッド関数
	@author	ryunosuke ide
	
	Copyright (c) 2014 Ryunosuke Ide
	Released under the MIT license
	http://opensource.org/licenses/mit-license.php
*/
//=============================================================================

#ifndef NK_THREAD_FUNC_H
#define NK_THREAD_FUNC_H

#include <nk/types.h>

namespace nk {
namespace thread {

//! スレッド関数
typedef u32 (*ThreadFunc)( void* );

#if defined(_WIN32)
//! ハンドル
typedef u32	ThreadHandle;

//! ミューテックスハンドル
typedef u32	MutexHandle;

//! クリティカルセクションハンドル
typedef u32	CriticalSectionHandle;
#else
	// TODO
#endif

//===========================================================================
/*!	@brief	スレッド初期化
	@param	none
	@return	none
*/
//===========================================================================
void Initialize();

	
//===========================================================================
/*!	@brief	スレッド終了処理
	@param	none
	@return	none
*/
//===========================================================================
void Terminate();
	

//===========================================================================
/*!	@brief	スレッド生成
	@param	func		呼び出し関数
	@param	arg			スレッド関数引数
	@param	priority	優先度
	@param	stackSize	スタックサイズ(デフォルトで0)
	@return	生成したスレッドのハンドル
*/
//===========================================================================
#if defined(_DEBUG)
ThreadHandle CreateThread( ThreadFunc func, void* arg, s32 priority = 16, u32 stackSize = 0, const char* name = "" );
#else
ThreadHandle CreateThread( ThreadFunc func, void* arg, s32 priority = 16, u32 stackSize = 0 )
#endif

//===========================================================================
/*!	@brief	スレッド削除
	@param	handle		削除するスレッドのハンドル
	@return	----
*/
//===========================================================================
void DestroyThread( ThreadHandle handle );


	
//===========================================================================
/*!	@brief	スレッド開始
	@param	開始するスレッドハンドル
	@return	----
*/
//===========================================================================
void StartThread( ThreadHandle handle );



//===========================================================================
/*!	@brief	スレッド中断
	@param	中断するスレッドハンドル
	@return	----
*/
//===========================================================================
void SuspendThread( ThreadHandle handle );


//===========================================================================
/*!	@brief	スレッド再開
	@param	再開するスレッドハンドル
	@return	----
*/
//===========================================================================
void ResumeThread( ThreadHandle handle );

	
//===========================================================================
/*!	@brief	スレッド終了待機
	@param	待つスレッド
	@return	----
*/
//===========================================================================
void JoinThread( ThreadHandle handle );



//===========================================================================
/*!	@brief	ミューテックスの作成
	@param	----
	@return	生成したミューテックスのハンドル
*/
//===========================================================================
MutexHandle CreateMutexObject();



//===========================================================================
/*!	@brief	ミューテックスの削除
	@param	handle	削除するミューテックスのハンドル
	@return	----
*/
//===========================================================================
void DeleteMutexObject( MutexHandle handle );


//===========================================================================
/*!	@brief	ミューテックスをロック
	@param	handle	ロックを試みるミューテックス
	@return	true.ロック成功		false.失敗
*/
//===========================================================================
bool LockMutex( MutexHandle handle );


//===========================================================================
/*!	@brief	ミューテックスをアンロック
	@param	handle	アンロックを試みるミューテックス
	@return	true.アンロック成功		false.失敗
*/
//===========================================================================
bool UnlockMutex( MutexHandle handle );


//===========================================================================
/*!	@brief		クリティカルセクションの作成
	@param		----
	@return		----
*/
//===========================================================================
CriticalSectionHandle CreateCriticalSection();


//===========================================================================
/*!	@brief		クリティカルセクションの削除
	@param		handle	削除するクリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void DeleteCriticalSection( CriticalSectionHandle handle );


//===========================================================================
/*!	@brief		クリティカルセクションのロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void LockCriticalSection( CriticalSectionHandle handle );


//===========================================================================
/*!	@brief		クリティカルセクションのアンロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void UnlockCriticalSection( CriticalSectionHandle handle );

//===========================================================================
/*!	@brief	全てのスレッドを停止させる
	@param	----
	@return	----
*/
//===========================================================================
void SuspendAllThread();


//===========================================================================
/*!	@brief	全てのスレッドを再開させる
	@param	----
	@return	----
*/
//===========================================================================
void ResumeAllThread();
	
}	// namespace thread
}	// namespace nk





#endif  // NK_THREAD_FUNC_H



#if 0
#include <winsock2.h>
#include <windows.h>
#include <process.h>
#include <vector>

#include <types.h>


#define	HANDLE_LIST_MAX		(128)		//!< ハンドル作成最大数
#define	THREAD_MAX			(32)		//!< スレッド数

namespace nk {

typedef u32 (*THREAD_FUNC)( void* );

#if defined(_WIN32)	// windows
//! スレッド関数

//! スレッドハンドル
typedef HANDLE				THREAD_HANDLE;

//! ミューテックスハンドル
typedef HANDLE				MUTEX_HANDLE;

//! 
typedef LPCRITICAL_SECTION	CRITICAL_SECTION_HANDLE;

//! イベントハンドル
//typedef HANDLE			EVENT_HANDLE;

//! スレッドID
typedef DWORD				THREAD_ID;

#else	// SDL

//! スレッドハンドル
typedef u32					THREAD_HANDLE;

//! ミューテックスハンドル
typedef u32					MUTEX_HANDLE;

//! クリティカルセクションハンドル
typedef void*				CRITICAL_SECTION_HANDLE;	// コンパイルエラーでるはず

//! スレッドID
typedef u32					THREAD_ID;
	
#endif







//===========================================================================
/*!	@brief	スレッド初期化
	@param	----
	@return	----
*/
//===========================================================================
void Initialize( void );


	
//===========================================================================
/*!	@brief	スレッド終了処理
	@param	----
	@return	----
*/
//===========================================================================
void Terminate( void );
	

//===========================================================================
/*!	@brief	スレッド生成
	@param	func		呼び出し関数
	@param	arg			スレッド関数引数
	@param	priority	優先度
	@param	stackSize	スタックサイズ(デフォルトで0)
	@return	生成したスレッドのハンドル
*/
//===========================================================================
THREAD_HANDLE	CreateThread( THREAD_FUNC func, void* arg, s32 priority = THREAD_PRIORITY_NORMAL, u32 stackSize = 0, const char* name = "" );
	

//===========================================================================
/*!	@brief	スレッド削除
	@param	handle		削除するスレッドのハンドル
	@return	----
*/
//===========================================================================
void			DestroyThread( THREAD_HANDLE handle );


	
//===========================================================================
/*!	@brief	スレッド開始
	@param	開始するスレッドハンドル
	@return	----
*/
//===========================================================================
void			StartThread( THREAD_HANDLE handle );



//===========================================================================
/*!	@brief	スレッド中断
	@param	中断するスレッドハンドル
	@return	----
*/
//===========================================================================
void			SuspendThread( THREAD_HANDLE handle );


//===========================================================================
/*!	@brief	スレッド再開
	@param	再開するスレッドハンドル
	@return	----
*/
//===========================================================================
void			ResumeThread( THREAD_HANDLE handle );

	
//===========================================================================
/*!	@brief	スレッド終了待機
	@param	待つスレッド
	@return	----
*/
//===========================================================================
void			JoinThread( THREAD_HANDLE handle );



//===========================================================================
/*!	@brief	ミューテックスの作成
	@param	----
	@return	生成したミューテックスのハンドル
*/
//===========================================================================
MUTEX_HANDLE	CreateMutexObject( void );



//===========================================================================
/*!	@brief	ミューテックスの削除
	@param	handle	削除するミューテックスのハンドル
	@return	----
*/
//===========================================================================
void			DeleteMutexObject( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief	ミューテックスをロック
	@param	handle	ロックを試みるミューテックス
	@return	true.ロック成功		false.失敗
*/
//===========================================================================
bool			LockMutex( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief	ミューテックスをアンロック
	@param	handle	アンロックを試みるミューテックス
	@return	true.アンロック成功		false.失敗
*/
//===========================================================================
bool			UnlockMutex( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションの作成
	@param		----
	@return		----
*/
//===========================================================================
CRITICAL_SECTION_HANDLE	CreateCriticalSection( void );


//===========================================================================
/*!	@brief		クリティカルセクションの削除
	@param		handle	削除するクリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			DeleteCriticalSection( CRITICAL_SECTION_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションのロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			LockCriticalSection( CRITICAL_SECTION_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションのアンロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			UnlockCriticalSection( CRITICAL_SECTION_HANDLE handle );

//===========================================================================
/*!	@brief	全てのスレッドを停止させる
	@param	----
	@return	----
*/
//===========================================================================
void			SuspendAllThread( void );



//===========================================================================
/*!	@brief	全てのスレッドを以前の状態に戻す
	@param	----
	@return	----
*/
//===========================================================================
void			ReturnAllThread( void );


//===========================================================================
/*!	@brief	全てのスレッドを再開させる
	@param	----
	@return	----
*/
//===========================================================================
void			ResumeAllThread( void );



#endif  // __THREAD_FUNC_H__
