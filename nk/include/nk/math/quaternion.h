//=============================================================================
/*!	@file	quaternion.h
	@brief	クオータニオン
	@author	ryunosuke ide
	
	Copyright (c) 2014 Ryunosuke Ide
	Released under the MIT license
	http://opensource.org/licenses/mit-license.php
*/
//=============================================================================


#ifndef NK_QUATERNION_H
#define NK_QUATERNION_H

#include <nk/types.h>


namespace nk {
namespace math {
	
struct Matrix44;
struct Vec3;
struct Vec4;
	
//=============================================================================
/*!	@brief		クォータニオン
	@caution	コンストラクタ内で初期化は行いません。
				必要に応じて #Zero, #Identity 等のクォータニオン生成関数を呼び出してください。
*/
//=============================================================================
class Quaternion {
public:
	
	
public:
	//! @{
	//! コンストラクタ
	Quaternion();
	
	//! デストラクタ
	~Quaternion();
	//! @}
	
	//===========================================================================
	/*!	@brief		正規化
	*/
	//===========================================================================
	void			Normalize();

	//===========================================================================
	/*!	@brief		共役
	*/
	//===========================================================================
	void			Conjugate();

	//===========================================================================
	/*!	@brief		掛け算
	*/
	//===========================================================================
	Quaternion		operator*( const Quaternion& qua ) const;
	
	//===========================================================================
	/*!	@brief		行列に変換
	*/
	//===========================================================================
	Matrix44		ToMatrix() const;

	//! @defgroup QuatanionInitializer Quatanion inititlizer
	//! @{
	//===========================================================================
	/*!	@brief		ゼロ
	*/
	//===========================================================================
	static Quaternion	Zero();
		
	//===========================================================================
	/*!	@brief		単位元
	*/
	//===========================================================================
	static Quaternion	Identity();
	
	//===========================================================================
	/*!	@brief		X軸回転
	*/
	//===========================================================================
	static Quaternion	RotateX( f32 theta );

	//===========================================================================
	/*!	@brief		Y軸回転
	*/
	//===========================================================================
	static Quaternion	RotateY( f32 theta );

	//===========================================================================
	/*!	@brief		Z軸回転
	*/
	//===========================================================================
	static Quaternion	RotateZ( f32 theta );

	//===========================================================================
	/*!	@brief		Yaw Pitch Roll(Y,X,Z)
	*/
	//===========================================================================
	static Quaternion	YawPitchRoll( f32 yaw, f32 pitch, f32 roll );

	//===========================================================================
	/*!	@brief		任意軸回転
	*/
	//===========================================================================
	static Quaternion	RotateAxis( const math::Vec3& axis, f32 theta );
	//! @}

	//===========================================================================
	/*!	@brief		内積
		@param		qua1, qua2	掛け合わせるクォータニオン
		@return		none
	*/
	//===========================================================================
	static f32			DotProduct( const Quaternion &q0, const Quaternion &q1 );
	
	//===========================================================================
	/*!	@brief		球面線形補間
		@param		begin	開始
		@param		end		終了
		@param		t		0.0-1.0
		@return		結果
	*/
	//===========================================================================
	Quaternion Slerp( const Quaternion& begin, const Quaternion& end, f32 t );
	
private:
	f32		m_t;
	f32		m_i;
	f32		m_j;
	f32		m_k;
};


}	// namespace math
}	// namespace nk

#endif NK_QUATERNION_H
